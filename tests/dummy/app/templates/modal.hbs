<div class="bs-docs-section" id="modal">
  <h1>Modal</h1>

  <div class="bs-callout bs-callout-info">
    <h4>Design</h4>
    <p>
      The modal implementation is inspired by
      <a href="http://ef4.github.io/liquid-fire/#/modals">
        Liquid Fire
      </a>.
    </p>
  </div>

  <h3>Example</h3>
  <div class="bs-example">
    {{#link-to (query-params modal=true) class="btn btn-primary" tagName="button"}}
      Open modal
    {{/link-to}}
  </div>

  <ol>
    <li>
      Insert the <code>\{{es-modal}}</code> component in your <code>application.hbs</code> template. You only need to do this once — it will manage all the modals in your application. It doesn't take any arguments.
      <br><br>
    </li>
    <li>
      Create an Ember component the usual way. For example, here is <code>app/templates/components/modal-example.hbs</code>:
      {{code-snippet name="modal.hbs"}}
      <br>
      And <code>app/components/modal-example.js</code>:
      {{code-snippet name="modal.js"}}
      <br>
    </li>
    <li>
      Call <code>modal()</code> within your router map, at whichever scope you choose and wire up any actions:
      {{code-snippet name="modal-router.js"}}
      <br>
    </li>
    <li>
      You can launch your modal by setting the relevant properties on your controller. If the properties are also query params, you can just <code>link-to</code>. For example, here's the controller for this page:
      {{code-snippet name="modal-controller.js"}}
      <br>
      Here's the template for a <code>link-to</code> button that launches the modal:
      {{code-snippet name="modal-link-to.hbs"}}
    </li>
  </ol>

  <h3>Options</h3>
  <table class="table table-bordered table-striped">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Default</th>
        <th>Description</th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>withParams</td>
        <td>array or object</td>
        <td>{}</td>
        <td>
          The property names that will be passed to the component. We will show the component whenever any of these has a non-default value. This can be a string, an array of strings, an object or an array of strings and objects.
          <br>
          If given an object, the key is the property name on the controller and the value will be the name this is accessed as in the modal component. For example, the following will map <code>foo</code> in the controller to <code>foo</code> in the modal, and <code>bar</code> in the controller to <code>baz</code> in the modal.
        </td>
      </tr>
      <tr>
        <td>otherParams</td>
        <td>array or object</td>
        <td>{}</td>
        <td>
          Lets you bind properties through from the controller to the modal. These do not affect the displaying of the modal. Accepts property names in the same format as `withParams`.
        </td>
      </tr>
      <tr>
        <td>controller</td>
        <td>string or object</td>
        <td>''</td>
        <td>
          Optionally override the controller name that we will bind to. By default we use the default controller name for the scope in which you call <code>modal()</code>.
        </td>
      </tr>
      <tr>
        <td>actions</td>
        <td>object</td>
        <td>{}</td>
        <td>
          Wire up actions from the modal component's <code>sendAction</code> to your app. For example, <code>actions: {submit: "modalSubmitted"}</code> will trigger the <code>modalSubmitted</code> event on your controller when a <code>submit</code> event is fired in your modal.
        </td>
      </tr>
      <tr>
        <td>animation</td>
        <td>boolean</td>
        <td>true</td>
        <td>Applies a CSS fade transition to the modal.</td>
      </tr>
      <tr>
        <td>size</td>
        <td>string</td>
        <td>''</td>
        <td>Defines the modal size. You can use <code>large</code> or <code>small</code>.</td>
      </tr>
      <tr>
        <td>backdrop</td>
        <td>boolean or the string <code>'static'</code></td>
        <td>true</td>
        <td>Includes a modal-backdrop element. Alternatively, specify <code>static</code> for a backdrop which doesn't close the modal on click.</td>
      </tr>
      <tr>
        <td>keyboard</td>
        <td>boolean</td>
        <td>true</td>
        <td>Closes the modal when escape key is pressed.</td>
      </tr>
    </tbody>
  </table>

  <div class="bs-callout bs-callout-warning">
    <h4>Warning</h4>
    <p>
      EmberStrap can render only one modal at same time.
    </p>
  </div>
</div>
